#!/bin/sh

SPEEDTEST_SERVERS="http://c.speedtest.net/speedtest-servers-static.php"
SAMPLE_SIZE="20"

if ! command -v curl > /dev/null; then
    print "This script needs curl to work."
    exit 1
fi

if ! command -v awk > /dev/null; then
    print "This script needs awk to work."
    exit 1
fi

temp_dir="$(dirname "$(mktemp)")"
servers_file="$temp_dir/speedtest.xml"
servers_distances="$temp_dir/speedtest.servers"

# put servers files in /tmp as cache
# if ! [ -f "$servers_distances" ] || [ -n "$1" ]; then

    if ! [ -f "$servers_file" ]; then
        printf "Getting servers list from speedtest.net...\\n"
        curl -so "$servers_file" "$SPEEDTEST_SERVERS"
    fi

    # get current geolocation
    geoloc="$(curl -s ipinfo.io | grep loc | cut -d'"' -f4)"
    lat="$(printf "%s" "$geoloc" | cut -d, -f1)"
    long="$(printf "%s" "$geoloc" | cut -d, -f2)"

    printf "Calculating distances...\\n"
    cat "$servers_file" | grep "server" | ( [ -n "$1" ] && grep "$1" || cat) | awk '{\
        FS=" ";\
        split($2, url, "\"");\
        split($3, lat, "\"");\
        split($4, lon, "\"");\
        d=(lat[2] - '$lat') * (lat[2] - '$lat') + (lon[2] - '$long') * (lon[2] - '$long');\
        print d, url[2] }\
    ' | sort -n > "$servers_distances"
# fi

# mesure latencies for the $SAMPLE_SIZE most close servers
printf "Measuring latency...\\n"
latencies="$(
    head -n "$SAMPLE_SIZE" "$servers_distances" | while read -r SERVER; do
        base_url="$(printf "%s" "$SERVER" | cut -d" " -f2 | sed -E 's/\/upload(\.php)?$//')"
        latency="$(curl -m 5 -sw "%{time_total}" -o /dev/null "$base_url/latency.txt" | tr -d ",." | cut -c 1-4)"
        printf "%s %s\\n" "$latency" "$base_url"
    done
)"

node="$(printf "%s" "$latencies" | sort -n | head -n1)"
node_speed="$(printf "%s" "$node" | cut -d" " -f1 | sed -E "s/^0+//g")"
node_name="$(printf "%s" "$node" | cut -d" " -f2 | sed -E 's/^https?:\/\/(www)?//' | sed -E 's/\/.*$//')"
printf "fastest node: %s\\n" "$(printf "%s %sms" "$node_name" "$node_speed")"

# remove top and bottom to remove irregularities
number="$(printf "%s" "$latencies" | wc -l)"
to_remove="$(( number / 5 + 1 ))"

latencies="$(printf "%s" "$latencies" | sort -nr | tail -n +"$to_remove" | sort -n | tail -n +"$to_remove")"

# calculate the mean latency
sum="$(printf "%s" "$latencies" | cut -d" " -f1 | awk '{sum += $1} END {print sum}')"
number="$(printf "%s" "$latencies" | wc -l)"
printf "speedtest mean network latency: %sms\\n" "$(( sum / number ))"
